#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

shopt -s dotglob    # enables commands like 'mv *' to see hidden files
set -e              # exit immediately if any command fails (non-zero status)

# buildpack debug output
pwd
ls -la

# create local variables pointing to key paths
app_files_dir=$1
cache_dir=$2
buildpack_dir=$(cd $(dirname $0) && cd .. && pwd)

# buildpack debug output
echo $app_files_dir
echo $cache_dir
echo $buildpack_dir
env

# download and configure required software ...
mkdir -p $cache_dir
cd $cache_dir
wget http://http://n2build2003.emea.tibco.com/software/cjedtest/jdk-7u67-linux-x64.tar.gz
wget http://http://n2build2003.emea.tibco.com/software/cjedtest/apache-karaf-3.0.3.tar.gz
tar xzf apache-karaf-3.0.3.tar.gz
tar xzf jdk-7u67-linux-x64.tar.gz

# remove versions from directories
mv $cache_dir/apache-karaf.3.0.3 $cache_dir/apache-karaf
mv $cache_dir/jdk1.7.0_67 $cache_dir/jdk

# configure Karaf webconsole to deploy and run on port 80
echo "org.osgi.service.http.port=$PORT" > $cache_dir/apache-karaf/etc/org.ops4j.pax.web.cfg
sed 's/^featuresBoot=.*$/&,webconsole/' $cache_dir/apache-karaf/etc/org.apache.karaf.features.cfg > $cache_dir/karaf.features.cfg
mv -f $cache_dir/karaf.features.cfg $cache_dir/apache-karaf/etc/org.apache.karaf.features.cfg

# put everything in place for droplet creation
mv $buildpack_dir/bin/launch.sh $app_files_dir/
mv $cache_dir/apache-karaf $app_files_dir/
mv $cache_dir/jdk $app_files_dir/

